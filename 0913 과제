*클래스의 구성요소
자바 클래스 = 중첩(내부)클래스 + 필드 + 생성자 + 메서드


*메서드 오버로딩
-하나의 클래스에 동일한 이름의 메서드를 중복하여 정의 단, 매개변수의 개수나 타입이 달라야 한다.

1. 메서드 오버로딩이 필요한이유
-개별적으로 작성시 많은 출력메서드가 필요하고 코드의 재사용이 어렵다 또한 메서드를 호출하는 과정에서 많은 수정이 필요하다.

2.메서드 오버로딩의 유형
-매개변수의 타입이 다른경우
-매개변수의 순서가 다른경우
-매겨변수의 개수가 다른경우


*생성자 오버로딩 
-생성자란 객체 생성 시에 객체 변수를 초기화하는 메서드를 의마한다.
-생성자 또한 메서드이므로 오버로딩이 가능하다.

-this() 생성자는 같은 클래스 내의 오버로딩된 다른 생성자 메서드를 호출할 때 사용된다.


*상속
-부모 클래스에서 정의된 필드와 메소드를 자식 클래스가 물려받는것.
 1. 상속이 필요한이유
 -공통된 특징을 가지는 클래스 사이의 멤버(메서드,필드)선언이 불필요하다
 -부모 클래스의 멤버를 재사용함으로써 간결해진다.
 -클래스간 계층적 분류 및 관리가 쉬워진다.
 
 2.상속의 특징
 -extends 뒤에는 단 하나의 부모 클래스만 올 수 있다.
 -상속 횟수의 제한이 없다.
 -최상위 클래스는 Object클래스다.
 
 3.상속과 접근 지정자
 -public : 모든 클래스에서 접근 가능하다.
 -priavte : 자신 클래스에서만 접근 가능하다.
 -default : 같은 패키지의 클래스에서만 접근 가능하다.
 -protected : 같은 패키지 혹은 다른 패키지라도 상속받은 클래스에서 접근 가능하다.
 
 
 *메서드의 오버라이딩
 -상위 클래스의 메서드를 하위 클래스가 재정의 하는 것.
 -메서드의 이름과 파라메터의 갯수나 타입도 동일해야하며, 주로 상위클래스의 동작을 상속받은
  하위 클래스에서 변경하기 위해 사용된다.
   즉,상속받은 메서드의 내용만 변경하는것이다.
   
   
   *인터페이스
   -클래스들이 구현해야하는 동작을 지정하는 용도로 사용되는 추상 자료형이다.
   -class 대신 interface 라는 키워드를 이용하여 선언할 수 있다.
   
   1.인터페이스 써야하는 이유
   -여러명이서 작업을 할때 미리 인터페이스를 작성함으로써 메서드를 정할 수 있다.
   -상속을 통한 이점을 누릴 수 있다.
   -유연한 방식의 프로그래밍이 가능해진다.
   
   
   *oop의 4대 개념
   1.추상화
   -대상에 대한 현재 내가 구현하고자 하는 프로그램에서의 관심사
   
   2.캡슐화
   -공톡적인 특징들은 크게 속성와행위로 나뉘게 되는데 이것들을 관련 있는 것뜰끼리 묶어놓은 것을 캡슐화라고 한다
   -관련있는 것들을 하나로 묶는 개념적인 주체가 바로 클래스class이다.
   -외부에서 접근이 필요한 부분을 제외하고는 내부로 숨기는 것이 중요.>>정보은닉
     세부 구현을 숨기는 목적은 클래스 내부 구현의 응집도를 높이고 다른 클래스와의 결합도를 낮추기 위해서
   
   * 객체는 클래스로부터 실체화된 것
     클래스는 추상적이기 떄문에 눈에 보이지 않고 개념적으로만 존재하지만 객체는 눈에 보이는 실체가 있다.
     ex)개(dog)라는 클래스가 있다면 우리집강아지 두부, 옆집강아지 초코는 객체
     
     3.상속성
     -A와 B는 상속 관계에 있다고 하며 클래스 A를 부모 클래스, 클래스 B를 자식 클래스라고 부릅니다. 
     -계층형 구조이고 아래로 내려갈수록 구체화 위로 올라갈수록 일반화된다.
     -일반적인 부모클래스에 코드를 자식 클래스가 사용하기에 코드의 재사용성이 향상된다 
     
     4. 다형성
     -객체지향에서 다형성이란 하나의 속성이나 행위가 상황에 따라 다른 의미로 해석될 수 있는 특징을 말한다.
     -객체지향의꽃!
     -상속을 이용하여 상위 클래스의 메서드를 하위클래스에서 재정의 하여 상위 클래스의 참조변수가 어떠한 하위 클래스의 인스턴스를 참조 하느냐에 따라
     동작이 달라지는 개념으로 이러한 방식으로 구현되는 다형성을 서브타입 다형성이라고 한다
     
     

     
     
     
   -
